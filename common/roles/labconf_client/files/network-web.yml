---

- hosts: localhost
  gather_facts: false

  vars:
    localchange: /root/labconf.latest
    access_conf: /etc/security/access.conf

  tasks:

    #
    # Get config from web server
    #
    - name: Get labconf data
      uri:
        url: http://uwsgi:5000/
        return_content: true
        body_format: json
      register: this

    #
    # End playbook if we can't get config updates
    #
    - name: Check if we got any config
      assert:
        that:
          - this.content  | length > 0
        quiet: true

    - block:
        - name: Check if config src is available
          debug:
            msg: "No config source, exiting playbook"

        - meta: end_play

      when: ( this.json.mtime is not defined )

    #
    # Remove local cache file when force is defined
    #
    - name: Remove local cache when enforced
      file:
        path: "{{ localchange }}"
        state: absent
      when: force is defined

    #
    # Check if localchange exists
    #
    - name: "Check localchange file {{ localchange }}"
      stat:
        path: "{{ localchange }}"
      register: st


    - block:

        - name: "Parse localchange file {{ localchange }}"
          set_fact:
            localjson: "{{ lookup('file', localchange ) | from_json }}"
          ignore_errors: true

        - name: "Locate mtime in localchange file"
          set_fact:
            localmtime: "{{ localjson.mtime | int }}"
          when: localjson.mtime is defined

      when: st.stat.exists is defined and st.stat.exists

    #
    # End playbook if repo is unchanged
    #
    - block:
        - name: Check if config is updated
          debug:
            msg: "No config update, exiting playbook"

        - meta: end_play

      when: ( localmtime is defined ) and
            ( this.json.mtime|int <= localmtime |int )

    #
    # Get some facts
    #
    - name: Collect network facts
      setup:
        gather_subset:
          - network

    - name: Save network config in local variable
      set_fact:
        network: "{{ this.json.network }}"
      when: this.json.network is defined

    - name: Save interface config in local variable
      set_fact:
        interface: "{{ this.json.interface }}"
      when: this.json.interface is defined

    - name: Save routing config in local variable
      set_fact:
        routing: "{{ this.json.routing }}"
      when: this.json.routing is defined

    - name: Save access config in local variable
      set_fact:
        access: "{{ this.json.access }}"
      when: this.json.access is defined

    #
    # Verify that the required fields are present "network and interface"
    #
    - name: Verify that network and interface is included in the config
      assert:
        that:
          - network | length > 0
          - interface | length > 0
        quiet: true

    #
    # We do not update the primary interface
    #
    - name: >
            "Check if we are trying to update primary interface
             {{ ansible_facts.default_ipv4.interface }}"
      fail:
        msg: >
            "Not allowed to change primary interface
             {{ ansible_facts.default_ipv4.interface }}"
      when: ansible_facts.default_ipv4.interface == interface

    #
    # Check if type is defined in facts, i.e. the interface exists
    #
    - name: "Get network type for interface {{ interface }}"
      set_fact:
        network_type: "{{ ansible_facts[interface]['type'] | default(omit) }}"

    #
    # Check if network_type is defined
    #
    - name: "Check if {{ interface }} is a network interface"
      fail:
        msg: "{{ interface }} is not a valid network interface"
      when: network_type is not defined

    #
    # Check if interface is in drop zone
    #
    - name: "Check if interface {{ interface }} is in drop zone"
      ansible.builtin.command:
        argv:
          - /usr/bin/firewall-cmd
          - --list-interfaces
          - --zone=drop
      register: indropzone
      changed_when: false

    - block:

        #
        # Move lab interface to drop zone
        #
        - name: "Move interface {{ interface }} to drop zone"
          ansible.builtin.command:
            argv:
              - /usr/bin/firewall-cmd
              - "--change-interface={{ interface }}"
              - --permanent
              - --zone=drop

        #
        # Reload firewalld
        #
        - name: Reload firewalld
          ansible.builtin.command:
            argv:
              - /usr/bin/firewall-cmd
              - --reload

      when: not ( indropzone.stdout | regex_search(interface) )


    #
    # Check if primary interface is in dmz zone
    #
    - name: >
         "Check if interface {{ ansible_facts.default_ipv4.interface }}
          is in dmz zone"
      ansible.builtin.command:
        argv:
          - /usr/bin/firewall-cmd
          - --list-interfaces
          - --zone=dmz
      register: indmzzone
      changed_when: false

    - block:

        #
        # Move primary interface to dmz zone
        #
        - name: >
             "Move interface {{ ansible_facts.default_ipv4.interface }}
             to drop zone"
          ansible.builtin.command:
            argv:
              - /usr/bin/firewall-cmd
              - "--change-interface={{ ansible_facts.default_ipv4.interface }}"
              - --permanent
              - --zone=dmz

        #
        # Reload firewalld
        #
        - name: Reload firewalld
          ansible.builtin.command:
            argv:
              - /usr/bin/firewall-cmd
              - --reload

      when: not ( indmzzone.stdout
              | regex_search(ansible_facts.default_ipv4.interface) )

    #
    # Verify network address is ok
    #
    # ( network | regex_search('^[0-9]+.[0-9]+.[0-9]+.[0-9]+\\/[0-9]+$') )
    - name: "Validate network address {{ network }} is valid"
      fail:
        msg: "The ip address {{ network  }} is not valid"
      when: not ( network | regex_search('^\d+.\d+.\d+.\d+\\/\d+$') )

    - name: Configure network interface ip address
      community.general.nmcli:
        conn_name: "{{ interface }}"
        ifname: "{{ interface }}"
        type: ethernet
        ip4: "{{ network }}"
        state: present
      register: net

    #
    # Routing
    #
    - block:

        #
        # Validate routing content
        #
        # when: not ( routing | regex_search('^[0-9]+.[0-9]+.[0-9]+.[0-9]+\\
        # /[0-9]+ +[0-9]+.[0-9]+.[0-9]+.[0-9]+$'))
        - name: "Validate routing {{ routing }} is valid"
          fail:
            msg: "The routing {{ routing  }} is not valid"
          when: not ( routing | regex_search('^\d+\.\d+\.\d+\.\d+\\/\d+\s+\d+\.\d+\.\d+\.\d+$'))

        #
        # Dont allow update default route
        #
        - name: "Validate routing {{ routing }} not overwriting default router"
          fail:
            msg: "The routing {{ routing  }} is not valid"
          when: ( routing | regex_search('^0.0.0.0') )

        #
        # Extract network and gateway
        #
        - name: Define destination network and router
          set_fact:
            remote_network: "{{ routing.split(' ')[0] }}"
            remote_router: "{{ routing.split(' ')[1] }}"
            iproutefile: "/etc/sysconfig/network-scripts/route-{{ interface }}"

        #
        # Create the iproute file
        #
        - name: Create empty iproute file ( if non existing )
          copy:
            content: "{{ remote_network }} via {{ remote_router }}"
            dest: "{{ iproutefile }}"
            force: false

        #
        # Update the route-interface file
        #
        - name: "Update ip route file {{ iproutefile }}"
          ansible.builtin.template:
            src: /root/iproute-template.j2
            dest: "{{ iproutefile }}"
          register: route

      when: routing is defined and routing | length > 0

    - block:

        - name: "Bring down the interface {{ interface }}"
          command: "/usr/sbin/ifdown {{ interface }}"
          register: down

        - name: "Bring up the interface {{ interface }}"
          command: "/usr/sbin/ifup {{ interface }}"
          register: up

      when: ( net.changed is defined and net.changed == true ) or
            ( route.changed is defined and route.changed == true )

    - block:

        - name: "Add root to {{ access_conf }}"
          lineinfile:
            path: "{{ access_conf }}"
            line: "+:root:ALL"
            backup: false

        - name: "Add access to {{ access_conf }}"
          lineinfile:
            path: "{{ access_conf }}"
            line: "+:{{ access }}:ALL"
            backup: false
          register: useradded

        - name: "Block all other in {{ access_conf }}"
          lineinfile:
            path: "{{ access_conf }}"
            line: "-:ALL:ALL"
            backup: false
          when: useradded.changed is defined and useradded.changed

        - name: "Enable pam_access"
          command:
            cmd: /usr/bin/authselect selec sssd with-pamaccess
          failed_when: false
          changed_when: false

      when: ( access is defined )

    - name: "Remove access config"
      lineinfile:
        dest: "{{ access_conf }}"
        regexp: '^(?!#)'
        state: absent
      when: ( access is not defined )

    #
    # Update local cache, to later check update dates
    #
    - name: Update localchange if new config
      copy:
        content: "{{ this.json | to_nice_json }}"
        dest: "{{ localchange }}"
      register: update
      when: ( localmtime is not defined ) or
            ( this.json.mtime|int > localmtime|int )
