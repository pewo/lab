---
- hosts: localhost
  gather_facts: false

  vars_files:
    - "bepa.yml"

  vars:
    localchange: /dev/shm/labconf.latest

  tasks:
  - name: "Parse localchange file {{ localchange }}"
    set_fact:
      localjson: "{{ lookup('file', localchange) | from_json }}"
    ignore_errors: true

  - debug: var=localjson

  - name: check if tl-mount-personal exists
    stat:
      path: /opt/thinlinc/libexec/tl-mount-personal
    register: pers_mount

  - name: Remove suid
    file:
      path: "{{ pers_mount.stat.path }}"
      mode: u-s
    when: pers_mount is defined and pers_mount.stat.exists 

  - name: check if tl-umount-personal exists
    stat:
      path: /opt/thinlinc/libexec/tl-umount-personal
    register: pers_umount

  - name: Remove suid
    file:
      path: "{{ pers_umount.stat.path }}"
      mode: u-s
    when: pers_umount is defined and pers_umount.stat.exists 

  - name: check if 40-tl-mount-localdrives exists
    stat:
      path: /opt/thinlinc/etc/xstartup.d/40-tl-mount-localdrives
    register: mount_local

  - name: Remove file
    file:
      path: "{{ mount_local.stat.path }}"
      state: absent
    when: mount_local is defined and mount_local.stat.exists 

  - name: check if cyclades-ser-cli exists
    stat:
      path: /opt/thinlinc/libexec/cyclades-ser-cli
    register: cyclades

  - name: Chmod file
    file:
      path: "{{ cyclades.stat.path }}"
      mode: 0000
    when: cyclades is defined and cyclades.stat.exists 

  - name: check if vsmagent.conf exists
    stat:
      path: /opt/thinlinc/etc/conf.d/vsmagent.hconf
    register: vsmconf

  - block: 

    - block:
      - name: Update xserver config
        replace:
           path: "{{ vsmconf.stat.path }}"
           regexp: '^xserver_args=.*'
           replace: 'xserver_args=-br -nolisten tcp -localhost -verbose 3 -noclipboard -AcceptCutText=0 -SendCutText=0'
           backup: true
        notify: Restart vsmagent

        #- name: activate syslog
        #replace:
        #   path: "{{ vsmconf.stat.path }}"
        #   regexp: '^log_to_syslog=.*'
        #   replace: 'log_to_syslog=1'
        #   backup: true
        #notify: Restart vsmagent
        #
        #- name: activate syslog destination
        #replace:
        #   path: "{{ vsmconf.stat.path }}"
        #   regexp: '^syslog_host=.*'
        #   replace: 'syslog_host=syslog'
        #   backup: true
        #notify: Restart vsmagent

      - name: Create a symbolic link
        file:
          src: /opt/thinlinc/bin/tl-shadow-notify
          dest: /opt/thinlinc/etc/xstartup.d/15-tl-shadow-notify
          state: link

      when:  vsmconf is defined and vsmconf.stat.exists 

    - name: check if we have sshd_config
      stat:
        path: /etc/ssh/sshd_config
      register: sshd_config

    - block:
      - name: Read sshd_cofig
        slurp:
          src: "{{ sshd_config.stat.path }}"
        register: sshd_content

      - set_fact:
          content: "{{ sshd_content['content'] | b64decode }}"

      - set_fact:
          thinlinc_begin: true
        when: '" @thinlinc-begin" in content'

      - name: Insert thinlinc block in /etc/ssh/sshd_config
        ansible.builtin.blockinfile:
          path: "{{ sshd_config.stat.path }}"
          marker: "# {mark} THINLINC1 ANSIBLE MANAGED BLOCK"
          block: |
            # @thinlinc-begin@
            # @thinlinc-end@
          validate: /usr/sbin/sshd -T -f %s
          insertafter: EOF
        notify: Restart sshd
        when: not thinlinc_begin is defined

      - name: Insert user block in /etc/ssh/sshd_config
        ansible.builtin.blockinfile:
          path: "{{ sshd_config.stat.path }}"
          marker: "# {mark} THINLINC2 ANSIBLE MANAGED BLOCK"
          block: |
            AllowUsers root
            Match group bepa
              AllowUsers *
              GatewayPorts no
              AllowTcpForwarding local
              PermitOpen 127.0.0.1:22
              ForceCommand /opt/thinlinc/libexec/thinlinc-login
          validate: /usr/sbin/sshd -T -f %s
          insertafter: EOF
        notify: Restart sshd

      when: sshd_config is defined and sshd_config.stat.exists

    when: vsmconf is defined and vsmconf.stat.exists

  handlers:
    #
    # Reload vsmagent
    #
    - name: Restart vsmagent
      service:
        name: vsmagent
        state: restarted
        
    #
    # Reload sshd
    #
    - name: Restart sshd
      service:
        name: sshd
        state: restarted
