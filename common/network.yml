- hosts: localhost
  gather_facts: false

  vars:
    git_dest: /etc/lab
    git_src: git@github.com:pewo/lab.git

  tasks:

  #
  # Get some facts
  #
  - setup:
      gather_subset:
        - network

          #- debug: var=ansible_facts
          #- meta: end_play

  #
  # Update local git repo
  #
  - name: get config from git
    git:
      repo: "{{ git_src }}"
      dest: "{{ git_dest }}"
    register: repo

  #
  # End playbook if repo is unchanged
  #
  - block:
    - name: Check if repo is updated
      debug:
        msg: "Repo is unchanged, exiting playbook"

    #- meta: end_play

    when: repo.changed is defined and repo.changed == false

  #
  # create variable for config location (within repo)
  #
  - name: Create config variable
    set_fact:
      config: "{{ git_dest }}/{{ ansible_facts.fqdn }}/config"
      #config: "/tmp/csv"

  #
  # Check if config exists
  #
  - name: "Check config file {{ config }}"
    stat:
      path: "{{ config }}"
    register: st

  # 
  # Exit if we are missing configuration file
  #
  - name: Check if {{ config }} exist
    fail:
     msg: "Something wrong or missing configuration file {{ config }}"
    when: st.stat.exists is defined and ( st.stat.exists == false or st.stat.isreg == false )

  #
  # Extract network information from config file
  #
  - set_fact:
      network: "{{ lookup('csvfile','network file={{ config }} delimiter=: col=1') | trim }}"
      interface: "{{ lookup('csvfile','interface file={{ config }} delimiter=: col=1') | trim }}"
      routing: "{{ lookup('csvfile','routing file={{ config }} delimiter=: col=1') | trim }}"

  #
  # Verify that the required fields are present "network and intetface"
  #
  - assert:
      that:
        - network | length > 0
        - interface | length > 0
      quiet: true

  #
  # We do not update the primary interface
  #
  - name: "Check if we are trying to update primary interface {{ ansible_facts.default_ipv4.interface }}"
    fail:
     msg: "Not allowed to change primary interface {{ ansible_facts.default_ipv4.interface }}"
    when: ansible_facts.default_ipv4.interface == interface

  - debug: var=ansible_facts.{{ interface }}.device

  - name: "Check network interface {{ interface }}"
    set_fact:
       is_interface: "{{ ansible_facts.interface.device | default(omit) }}"

  - debug: var=is_interface

  - name: "Check if {{ interface }}  is a network interface"
    fail: 
      msg: "{{ interface }} is not an network interface"
    when: is_interface is not defined

  - meta: end_play

    #       "ens18": {
    #"active": true,
    #"device": "ens18",

  - name: Update firewalld zone block to block
    ansible.posix.firewalld:
      zone: drop
      target: DROP
      state: enabled
      permanent: true

  - name: "Add interface {{ interface }} to zone block"
    ansible.posix.firewalld:
      zone: drop
      state: enabled
      permanent: yes
      immediate: true
      interface: "{{ interface }}"
  #
  # Verify network address is ok
  #
  - name: "Validate network address {{ network }} is valid"
    fail: 
      msg: "The ip address {{ network  }} is not valid"
    when: not ( network | regex_search('^[0-9]+.[0-9]+.[0-9]+.[0-9]+\\/[0-9]+$') )

  - name: Configure network interface ip address
    community.general.nmcli:
      conn_name: "{{ interface }}"
      ifname: "{{ interface }}"
      type: ethernet
      ip4: "{{ network }}"
      state: present
    register: net

  #
  # Routing
  #
  - block:

    #
    # Validate routing content
    #
    - name: "Validate routing {{ routing }} is valid"
      fail: 
        msg: "The routing {{ routing  }} is not valid"
      when: not ( routing | regex_search('^[0-9]+.[0-9]+.[0-9]+.[0-9]+\\/[0-9]+ +[0-9]+.[0-9]+.[0-9]+.[0-9]+$') )

    #
    # Dont allow update default route
    #
    - name: "Validate routing {{ routing }} not overwriting default router"
      fail: 
        msg: "The routing {{ routing  }} is not valid"
      when: ( routing | regex_search('^0.0.0.0') )

    #
    # Extract network and gateway
    #
    - name: Define destination network and router
      set_fact:
         remote_network: "{{ routing.split(' ')[0] }}"
         remote_router:  "{{ routing.split(' ')[1] }}"
         iproutefile: "/etc/sysconfig/network-scripts/route-{{ interface }}"

    #
    # Update the route-interface file
    #
    - name: "Update ip route file {{ iproutefile }}"
      copy:
        dest: "{{ iproutefile }}"
        content: "{{ remote_network }} via {{ remote_router }}"
      register: route

    when: routing | length > 0

  - block:

    - name: "Bring down the interface {{ interface }}"
      command: "/usr/sbin/ifdown {{ interface }}"
      register: down

    - name: "Bring up the interface {{ interface }}"
      command: "/usr/sbin/ifup {{ interface }}"
      register: up

    when: ( net.changed is defined and net.changed == true ) or
          ( route.changed is defined and route.changed == true )
